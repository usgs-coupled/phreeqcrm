# CMAKE_MSVC_RUNTIME_LIBRARY requires 3.15
cmake_minimum_required(VERSION 3.20)

project(
  PhreeqcRM
  VERSION 3.7.0
  LANGUAGES CXX C
)

# function (ixm::exit variable access value current stack)
#   message(STATUS "variable=${variable}")
#   message(STATUS "access=${access}")
#   message(STATUS "value=${value}")
#   message(STATUS "current=${current}")
#   message(STATUS "stack=${stack}")
#   if (NOT(access MATCHES "READ_ACCESS"))
#     ##message(FATAL_ERROR "STOPPING")
#   endif()
# endfunction()
# ##variable_watch(MPI_Fortran_F77_HEADER_DIR ixm::exit)
# ##variable_watch(MPI_FORTRAN_FOUND ixm::exit)
# ##variable_watch(MPI_Fortran_WORKS ixm::exit)
# variable_watch(MPI_RESULT_Fortran_test_mpi_F77_HEADER ixm::exit)

# check if this is the root project
if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)
  set(STANDALONE_BUILD 1)
else()
  set(STANDALONE_BUILD 0)
endif()

# overide docdir on windows
if(WIN32 AND NOT CMAKE_INSTALL_DOCDIR)
  set(CMAKE_INSTALL_DOCDIR "" CACHE PATH "documentation root (doc)")
  set(CMAKE_INSTALL_DOCDIR "doc")
endif()

option(PHREEQCRM_FORTRAN_TESTING "Build Fortran test" OFF)
if(PHREEQCRM_FORTRAN_TESTING)
  enable_language(Fortran)
endif()

include(GNUInstallDirs)

# check for zlib
option(PHREEQCRM_USE_ZLIB "Use zlib compression for dump files" OFF)
if(NOT ZLIB_ROOT)
  # A user may set ZLIB_ROOT to a zlib installation root to tell this module where to look.
  if(EXISTS $ENV{ZLIB_ROOT})
    set(ZLIB_ROOT $ENV{ZLIB_ROOT})
  endif()
endif()
if(PHREEQCRM_USE_ZLIB)
  find_package(ZLIB REQUIRED)
endif()

# check for disable OpenMP
option(PHREEQCRM_DISABLE_OPENMP "Disable openmp" "OFF")
if(NOT PHREEQCRM_DISABLE_OPENMP)
  if(STANDALONE_BUILD EQUAL 1)
    # check for openmp
    find_package(OpenMP)
  endif()
endif()

# check for MPI
option(PHREEQCRM_BUILD_MPI "Build MPI configuration" "OFF")
if(PHREEQCRM_BUILD_MPI)
  # set(MPI_GUESS_LIBRARY_NAME MSMPI) @TODO check this
  find_package(MPI REQUIRED)
endif()

set(PhreeqcRM_SOURCES
  src/IPhreeqcPhast/IPhreeqc/CSelectedOutput.cpp
  src/IPhreeqcPhast/IPhreeqc/CSelectedOutput.hxx
  src/IPhreeqcPhast/IPhreeqc/CVar.hxx
  src/IPhreeqcPhast/IPhreeqc/Debug.h
  src/IPhreeqcPhast/IPhreeqc/ErrorReporter.hxx
  src/IPhreeqcPhast/IPhreeqc/IPhreeqc.cpp
  src/IPhreeqcPhast/IPhreeqc/IPhreeqc.h
  src/IPhreeqcPhast/IPhreeqc/IPhreeqc.hpp
  src/IPhreeqcPhast/IPhreeqc/IPhreeqc_interface_F.cpp
  src/IPhreeqcPhast/IPhreeqc/IPhreeqc_interface_F.h
  src/IPhreeqcPhast/IPhreeqc/IPhreeqcCallbacks.h
  src/IPhreeqcPhast/IPhreeqc/IPhreeqcLib.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/advection.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/basicsubs.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/cl1.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/common/Parser.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/common/Parser.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/common/PHRQ_base.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/common/PHRQ_base.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/common/PHRQ_exports.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/common/PHRQ_io.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/common/PHRQ_io.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/common/phrqtype.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/common/Utils.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/common/Utils.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/cvdense.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/cvdense.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/cvode.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/cvode.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/cxxKinetics.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/cxxKinetics.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/cxxMix.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/cxxMix.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/dense.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/dense.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/Dictionary.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/Dictionary.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/dumper.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/dumper.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/Exchange.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/Exchange.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/ExchComp.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/ExchComp.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/GasComp.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/GasComp.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/gases.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/GasPhase.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/GasPhase.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/global_structures.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/input.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/integrate.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/inverse.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/ISolution.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/ISolution.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/ISolutionComp.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/ISolutionComp.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/isotopes.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/kinetics.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/KineticsComp.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/KineticsComp.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/mainsubs.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/model.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/NA.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/NameDouble.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/NameDouble.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/NumKeyword.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/NumKeyword.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/nvector.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/nvector.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/nvector_serial.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/nvector_serial.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/parse.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/PBasic.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/PBasic.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/phqalloc.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/phqalloc.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/Phreeqc.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/Phreeqc.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/PhreeqcKeywords/Keywords.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/PhreeqcKeywords/Keywords.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/PHRQ_io_output.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/pitzer.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/pitzer_structures.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/PPassemblage.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/PPassemblage.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/PPassemblageComp.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/PPassemblageComp.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/prep.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/Pressure.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/Pressure.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/print.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/Reaction.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/Reaction.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/read.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/ReadClass.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/readtr.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/runner.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/runner.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/SelectedOutput.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/SelectedOutput.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/Serializer.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/Serializer.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/sit.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/smalldense.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/smalldense.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/Solution.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/Solution.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/SolutionIsotope.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/SolutionIsotope.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/spread.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/SS.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/SS.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/SSassemblage.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/SSassemblage.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/SScomp.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/SScomp.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/step.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/StorageBin.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/StorageBin.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/StorageBinList.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/StorageBinList.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/structures.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/sundialsmath.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/sundialsmath.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/sundialstypes.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/Surface.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/Surface.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/SurfaceCharge.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/SurfaceCharge.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/SurfaceComp.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/SurfaceComp.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/System.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/System.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/tally.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/Temperature.cxx
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/Temperature.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/tidy.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/transport.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/Use.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/Use.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/UserPunch.cpp
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/UserPunch.h
  src/IPhreeqcPhast/IPhreeqc/phreeqcpp/utilities.cpp
  src/IPhreeqcPhast/IPhreeqc/thread.h
  src/IPhreeqcPhast/IPhreeqc/Var.c
  src/IPhreeqcPhast/IPhreeqc/Var.h
  src/IPhreeqcPhast/IPhreeqc/Version.h
  src/IPhreeqcPhast/IPhreeqcPhast.cxx
  src/IPhreeqcPhast/IPhreeqcPhast.h
  src/IPhreeqcPhast/IPhreeqcPhastLib.cpp
  src/IPhreeqcPhast/IPhreeqcPhastLib.h
  src/IrmResult.h
  src/PhreeqcRM.cpp
  src/PhreeqcRM.h
  src/RM_interface_C.cpp
  src/RM_interface_C.h
  src/RM_interface_F.cpp
  src/RM_interface_F.h
)

# dll/shared objects
option(BUILD_SHARED_LIBS "Build Shared Libraries" OFF)
set(LIB_TYPE STATIC)
if(BUILD_SHARED_LIBS)
  set(LIB_TYPE SHARED)
endif()

add_library(PhreeqcRM ${LIB_TYPE} ${PhreeqcRM_SOURCES})
add_library(PhreeqcRM::PhreeqcRM ALIAS PhreeqcRM)

# iphreeqc defs
target_compile_definitions(PhreeqcRM PRIVATE IPhreeqc_EXPORTS)
target_compile_definitions(PhreeqcRM PRIVATE SWIG_SHARED_OBJ)
target_compile_definitions(PhreeqcRM PRIVATE USE_PHRQ_ALLOC)

# Disable deprecation warnings for standard C and STL functions in VS2005
# and later
if (MSVC_VERSION EQUAL 1400 OR MSVC_VERSION GREATER 1400)
  target_compile_definitions(PhreeqcRM PRIVATE _CRT_SECURE_NO_DEPRECATE)
  target_compile_definitions(PhreeqcRM PRIVATE _SCL_SECURE_NO_WARNINGS)
endif()

# setup include directories
target_include_directories(PhreeqcRM
  PUBLIC
  $<BUILD_INTERFACE:${PhreeqcRM_SOURCE_DIR}/src>
  $<BUILD_INTERFACE:${PhreeqcRM_SOURCE_DIR}/src/IPhreeqcPhast>
  $<BUILD_INTERFACE:${PhreeqcRM_SOURCE_DIR}/src/IPhreeqcPhast/IPhreeqc>
  $<BUILD_INTERFACE:${PhreeqcRM_SOURCE_DIR}/src/IPhreeqcPhast/IPhreeqc/phreeqcpp>
  $<BUILD_INTERFACE:${PhreeqcRM_SOURCE_DIR}/src/IPhreeqcPhast/IPhreeqc/phreeqcpp/common>
  $<BUILD_INTERFACE:${PhreeqcRM_SOURCE_DIR}/src/IPhreeqcPhast/IPhreeqc/phreeqcpp/PhreeqcKeywords>
  $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
)


# Allow user to override POSTFIX properties (but mandate them so that
# all builds can be installed to the same directory)
if(NOT CMAKE_DEBUG_POSTFIX)
  set_target_properties(PhreeqcRM PROPERTIES DEBUG_POSTFIX "d")
endif()
if(NOT CMAKE_MINSIZEREL_POSTFIX)
  set_target_properties(PhreeqcRM PROPERTIES MINSIZEREL_POSTFIX "msr")
endif()
if(NOT CMAKE_RELWITHDEBINFO_POSTFIX)
  set_target_properties(PhreeqcRM PROPERTIES RELWITHDEBINFO_POSTFIX "rwd")
endif()

# @TODO this needs to be checked
# # At least with MSMPI PhreeqcRM.dll requires MPI_CXX_LIBRARIES to link
# if (MSVC AND BUILD_SHARED_LIBS AND PHREEQCRM_BUILD_MPI)
#   ##target_link_libraries(PhreeqcRM PUBLIC ${MPI_CXX_LIBRARIES})
#   target_link_libraries(PhreeqcRM PUBLIC MPI::MPI_CXX)
# endif()

set(PhreeqcRM_Headers
  ${PROJECT_SOURCE_DIR}/src/IPhreeqcPhast/IPhreeqc/IPhreeqc.h
  ${PROJECT_SOURCE_DIR}/src/IPhreeqcPhast/IPhreeqc/IPhreeqc.hpp
  ${PROJECT_SOURCE_DIR}/src/IPhreeqcPhast/IPhreeqc/IPhreeqcCallbacks.h
  ${PROJECT_SOURCE_DIR}/src/IPhreeqcPhast/IPhreeqc/phreeqcpp/common/Parser.h
  ${PROJECT_SOURCE_DIR}/src/IPhreeqcPhast/IPhreeqc/phreeqcpp/common/PHRQ_base.h
  ${PROJECT_SOURCE_DIR}/src/IPhreeqcPhast/IPhreeqc/phreeqcpp/common/PHRQ_exports.h
  ${PROJECT_SOURCE_DIR}/src/IPhreeqcPhast/IPhreeqc/phreeqcpp/common/PHRQ_io.h
  ${PROJECT_SOURCE_DIR}/src/IPhreeqcPhast/IPhreeqc/phreeqcpp/common/phrqtype.h
  ${PROJECT_SOURCE_DIR}/src/IPhreeqcPhast/IPhreeqc/phreeqcpp/NameDouble.h
  ${PROJECT_SOURCE_DIR}/src/IPhreeqcPhast/IPhreeqc/phreeqcpp/PhreeqcKeywords/Keywords.h
  ${PROJECT_SOURCE_DIR}/src/IPhreeqcPhast/IPhreeqc/phreeqcpp/StorageBin.h
  ${PROJECT_SOURCE_DIR}/src/IPhreeqcPhast/IPhreeqc/phreeqcpp/System.h
  ${PROJECT_SOURCE_DIR}/src/IPhreeqcPhast/IPhreeqc/Var.h
  ${PROJECT_SOURCE_DIR}/src/IPhreeqcPhast/IPhreeqcPhast.h
  ${PROJECT_SOURCE_DIR}/src/IrmResult.h
  ${PROJECT_SOURCE_DIR}/src/PhreeqcRM.h
  ${PROJECT_SOURCE_DIR}/src/RM_interface_C.h
)

set(PhreeqcRM_SRC
  ${PROJECT_SOURCE_DIR}/src/RM_interface.F90
  ${PROJECT_SOURCE_DIR}/src/IPhreeqcPhast/IPhreeqc/IPhreeqc_interface.F90
)

# init exportPackageDependencies
set(exportPackageDependencies "")

# zlib
if (PHREEQCRM_USE_ZLIB AND ZLIB_FOUND)
  target_compile_definitions(PhreeqcRM PRIVATE USE_GZ)
  target_link_libraries(PhreeqcRM PUBLIC ZLIB::ZLIB)
  string(APPEND exportPackageDependencies "find_dependency(ZLIB)\n")
endif()

if(PHREEQCRM_BUILD_MPI)
  # USE_MPI needs to be public in order to compile the
  # fortran interface files
  target_compile_definitions(PhreeqcRM PUBLIC USE_MPI)
  target_link_libraries(PhreeqcRM PUBLIC MPI::MPI_CXX)
  if(PHREEQCRM_FORTRAN_TESTING)
    target_link_libraries(PhreeqcRM PUBLIC MPI::MPI_Fortran)
  endif()
  string(APPEND exportPackageDependencies "find_dependency(MPI)\n")
else()
  if(NOT PHREEQCRM_DISABLE_OPENMP)
    if(OpenMP_FOUND)
      target_compile_definitions(PhreeqcRM PRIVATE USE_OPENMP)
      target_link_libraries(PhreeqcRM PUBLIC OpenMP::OpenMP_CXX)
      string(APPEND exportPackageDependencies "find_dependency(OpenMP)\n")
      if(PHREEQCRM_FORTRAN_TESTING)
        target_link_libraries(PhreeqcRM PUBLIC OpenMP::OpenMP_Fortran)
      endif()
    endif()
  endif()
endif()

# install
if(STANDALONE_BUILD EQUAL 1)

  include(CMakePackageConfigHelpers)

  configure_package_config_file(PhreeqcRMConfig.cmake.in
    ${CMAKE_CURRENT_BINARY_DIR}/PhreeqcRMConfig.cmake
    INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/PhreeqcRM
  )

  write_basic_package_version_file("PhreeqcRMConfigVersion.cmake"
    VERSION ${PhreeqcRM_VERSION}
    COMPATIBILITY SameMajorVersion
  )

  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/PhreeqcRMConfig.cmake ${CMAKE_CURRENT_BINARY_DIR}/PhreeqcRMConfigVersion.cmake
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/PhreeqcRM
  )

  install(TARGETS PhreeqcRM
    EXPORT   PhreeqcRMTargets
    LIBRARY  DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE  DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME  DESTINATION ${CMAKE_INSTALL_BINDIR}
    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  )

  install(EXPORT PhreeqcRMTargets
    FILE PhreeqcRMTargets.cmake
    NAMESPACE PhreeqcRM::
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/PhreeqcRM
  )

  install(FILES ${PhreeqcRM_Headers}
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  )

  install(FILES ${PhreeqcRM_SRC}
    DESTINATION src
  )
else()
  # option(PHREEQCRM_INSTALL_TARGETS "" OFF)
  if(PHREEQCRM_INSTALL_TARGETS)
    install(TARGETS PhreeqcRM DESTINATION ${CMAKE_INSTALL_LIBDIR})
  endif()
endif()

if(STANDALONE_BUILD EQUAL 1 AND MSVC)
  # PHREEQCRM_STATIC_RUNTIME (VCOMP???.dll) cannot be made static
  option(PHREEQCRM_STATIC_RUNTIME "Build with a static runtime (excluding VCOMP???.DLL)" OFF)
  if(PHREEQCRM_STATIC_RUNTIME)
    # compile with static runtime

    set(CompilerFlags
      CMAKE_CXX_FLAGS
      CMAKE_CXX_FLAGS_DEBUG
      CMAKE_CXX_FLAGS_RELEASE
      CMAKE_CXX_FLAGS_MINSIZEREL
      CMAKE_CXX_FLAGS_RELWITHDEBINFO
      CMAKE_C_FLAGS
      CMAKE_C_FLAGS_DEBUG
      CMAKE_C_FLAGS_RELEASE
      CMAKE_C_FLAGS_MINSIZEREL
      CMAKE_C_FLAGS_RELWITHDEBINFO
    )

    foreach(CompilerFlag ${CompilerFlags})
      if(${CompilerFlag} MATCHES "/MD")
        string(REGEX REPLACE "/MD" "/MT" ${CompilerFlag} "${${CompilerFlag}}")
      endif()
    endforeach()

    set(FortranCompilerFlags CMAKE_Fortran_FLAGS)

    foreach(FortranCompilerFlags ${FortranCompilerFlags})
      if(${FortranCompilerFlags} MATCHES "/libs:dll")
        string(REGEX REPLACE "/libs:dll" "/libs:static" ${FortranCompilerFlags} "${${FortranCompilerFlags}}")
      endif()
    endforeach()
  endif()
endif()

if(STANDALONE_BUILD EQUAL 1)
  # tests
  enable_testing()

  # subdirs
  add_subdirectory(database)
  add_subdirectory(doc)
  add_subdirectory(Doxygen)
  add_subdirectory(swig)
  add_subdirectory(Tests)
endif()

# Turn off Incremental Linking for Debug and RelWithDebInfo
if(MSVC)
  foreach(FLAG_TYPE EXE MODULE SHARED)
    # Debug
    string(REPLACE "/INCREMENTAL:YES " "/INCREMENTAL:NO " CMAKE_${FLAG_TYPE}_LINKER_FLAGS_DEBUG ${CMAKE_${FLAG_TYPE}_LINKER_FLAGS_DEBUG})
    string(REGEX REPLACE " /INCREMENTAL:YES$" " /INCREMENTAL:NO" CMAKE_${FLAG_TYPE}_LINKER_FLAGS_DEBUG ${CMAKE_${FLAG_TYPE}_LINKER_FLAGS_DEBUG})
    string(REPLACE "/INCREMENTAL " "/INCREMENTAL:NO " CMAKE_${FLAG_TYPE}_LINKER_FLAGS_DEBUG ${CMAKE_${FLAG_TYPE}_LINKER_FLAGS_DEBUG})
    string(REGEX REPLACE " /INCREMENTAL$" " /INCREMENTAL:NO" CMAKE_${FLAG_TYPE}_LINKER_FLAGS_DEBUG ${CMAKE_${FLAG_TYPE}_LINKER_FLAGS_DEBUG})
    set(CMAKE_${FLAG_TYPE}_LINKER_FLAGS_DEBUG
        "${CMAKE_${FLAG_TYPE}_LINKER_FLAGS_DEBUG}" CACHE STRING
        "Flags used by the shared libraries linker during Debug builds."
        FORCE
    )

    # RelWithDebInfo
    string(REPLACE "/INCREMENTAL:YES " "/INCREMENTAL:NO " CMAKE_${FLAG_TYPE}_LINKER_FLAGS_RELWITHDEBINFO ${CMAKE_${FLAG_TYPE}_LINKER_FLAGS_RELWITHDEBINFO})
    string(REGEX REPLACE " /INCREMENTAL:YES$" " /INCREMENTAL:NO" CMAKE_${FLAG_TYPE}_LINKER_FLAGS_RELWITHDEBINFO ${CMAKE_${FLAG_TYPE}_LINKER_FLAGS_RELWITHDEBINFO})
    string(REPLACE "/INCREMENTAL " "/INCREMENTAL:NO " CMAKE_${FLAG_TYPE}_LINKER_FLAGS_RELWITHDEBINFO ${CMAKE_${FLAG_TYPE}_LINKER_FLAGS_RELWITHDEBINFO})
    string(REGEX REPLACE " /INCREMENTAL$" " /INCREMENTAL:NO" CMAKE_${FLAG_TYPE}_LINKER_FLAGS_RELWITHDEBINFO ${CMAKE_${FLAG_TYPE}_LINKER_FLAGS_RELWITHDEBINFO})
    set(CMAKE_${FLAG_TYPE}_LINKER_FLAGS_RELWITHDEBINFO
        "${CMAKE_${FLAG_TYPE}_LINKER_FLAGS_RELWITHDEBINFO}" CACHE STRING
        "Flags used by the shared libraries linker during Release with Debug Info builds."
        FORCE
    )
  endforeach()
endif()

# get_cmake_property(_variableNames VARIABLES)
# list (SORT _variableNames)
# foreach (_variableName ${_variableNames})
#   message(STATUS "${_variableName}=${${_variableName}}")
# endforeach()
