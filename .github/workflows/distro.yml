name: Build Distro

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches:
      - master

env:
  NAME: PhreeqcRM
  BUILD_TYPE: Release

jobs:

  init:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    # Map step outputs to job outputs
    outputs:
      VER: ${{ steps.vars.outputs.VER }}
      REL: ${{ steps.vars.outputs.REL }}
      DATE: ${{ steps.vars.outputs.DATE }}
      DATE_RFC_3339: ${{ steps.vars.outputs.DATE_RFC_3339 }}
    steps:
      - name: Setup vars
        id: vars
        run: |
          echo VER=$(curl -sS https://raw.githubusercontent.com/usgs-coupled/phreeqc-version/main/next_ver.sh | sh) >> $GITHUB_OUTPUT
          echo REL=$(curl -sS https://raw.githubusercontent.com/usgs-coupled/phreeqc-version/main/rel.py | python3) >> $GITHUB_OUTPUT
          echo DATE=$(date "+%x")                                                                                   >> $GITHUB_OUTPUT
          echo DATE_RFC_3339=$(date --rfc-3339=date)                                                                >> $GITHUB_OUTPUT

  distcheck:
    name: make distcheck
    needs: init
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: autoreconf
      run: autoreconf -fvi

    - name: versioning
      run: ./jenkins-dist.sh -v ${{ needs.init.outputs.VER }} -r ${{ needs.init.outputs.REL }} -d ${{ needs.init.outputs.DATE }}

    - name: doxygen
      run: sudo apt-get -y install doxygen graphviz && cd Doxygen && make

    - name: install yaml-cpp
      run: sudo apt-get -y install libyaml-cpp-dev

    - name: mkdir
      run: mkdir ${{github.workspace}}/_build

    - name: configure
      shell: bash
      working-directory: ${{github.workspace}}/_build
      run: ../configure --prefix=$(pwd)/INSTALL

    - name: make
      shell: bash
      working-directory: ${{github.workspace}}/_build
      run: make -j2 distcheck

    - uses: actions/upload-artifact@v3
      with:
        name: tarball
        path: ${{github.workspace}}/_build/*.tar.gz

  autotools:
    name: autotools
    needs: [init, distcheck]
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]

    runs-on: ${{ matrix.os }}

    env:
      VER_STRING: ${{ needs.init.outputs.VER }}-${{ needs.init.outputs.REL }}

    steps:

    - uses: actions/download-artifact@v3
      with:
        name: tarball

    - name: Install ninja yaml-cpp valgrind (Linux)
      if: runner.os == 'Linux'
      run: sudo apt-get install -y ninja-build valgrind libyaml-cpp-dev

    - name: Install ninja yaml-cpp (macOS)
      if: runner.os == 'macOS'
      run: brew install ninja yaml-cpp

    - name: Extract tarball
      run: tar xvzf phreeqcrm-${{ env.VER_STRING }}.tar.gz

    - name: mkdir build
      run: mkdir ${{ github.workspace }}/build

    - name: Configure with autotools
      working-directory: ${{ github.workspace }}/build
      run: ../phreeqcrm-${{ env.VER_STRING }}/configure

    - name: Build with autotools
      working-directory: ${{ github.workspace }}/build
      run: make -j2

    - name: Install with autotools
      working-directory: ${{ github.workspace }}/build
      run: sudo make install

    - name: Run ldconfig (Linux)
      if: runner.os == 'Linux'
      working-directory: ${{ github.workspace }}/build
      run: sudo ldconfig

    - name: Cleanup
      run: rm -rf *

    - uses: actions/checkout@v3

    - name: Test install
      working-directory: ${{ github.workspace }}/Tests
      run: env CC='gcc' CXX='g++ -std=gnu++11' make -f check.mk test && ./test

  cmake:
    name: cmake
    needs: [init, distcheck]
    strategy:
      fail-fast: false
      matrix:
        os: [macos-11, macos-12, ubuntu-20.04, ubuntu-22.04, windows-2019, windows-2022]
        build_shared_libs: [OFF, ON]
        phreeqcrm_with_yaml_cpp: [OFF, ON]

    runs-on: ${{ matrix.os }}

    env:
      VER_STRING: ${{ needs.init.outputs.VER }}-${{ needs.init.outputs.REL }}

    steps:

    - uses: actions/download-artifact@v3
      with:
        name: tarball

    - name: Install ninja yaml-cpp valgrind (Linux)
      if: runner.os == 'Linux'
      #run: sudo apt-get install -y ninja-build valgrind libyaml-cpp-dev python3-numpy
      run: sudo apt-get install -y ninja-build valgrind libyaml-cpp-dev

    - name: Install ninja yaml-cpp (macOS)
      if: runner.os == 'macOS'
      run: brew install ninja yaml-cpp

    - name: Install yaml-cpp (Windows)
      if: ${{ runner.os == 'Windows' && matrix.phreeqcrm_with_yaml_cpp == 'ON' }}
      run: vcpkg install yaml-cpp:x64-windows

    # - name: Set up Python ${{ matrix.python-version }}
    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        # python-version: ${{ matrix.python-version }}
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install numpy
        # @todo if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Set up Visual Studio shell (Windows)
      if: runner.os == 'Windows'
      uses: egor-tensin/vs-shell@v2
      with:
        arch: x64

    - name: Extract tarball
      run: tar xvzf phreeqcrm-${{ env.VER_STRING }}.tar.gz

    - name: Configure with CMake (Not Windows)
      if: runner.os != 'Windows'
      run: cmake -B build -S phreeqcrm-${{ env.VER_STRING }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DBUILD_SHARED_LIBS=${{ matrix.build_shared_libs }} -DPHREEQCRM_WITH_YAML_CPP=${{ matrix.phreeqcrm_with_yaml_cpp }} -DPHREEQCRM_BUILD_PYTHON:BOOL=ON

    - name: Configure with CMake (Windows)
      if: ${{ runner.os == 'Windows' && matrix.phreeqcrm_with_yaml_cpp != 'ON' }}
      run: cmake -B build -S phreeqcrm-${{ env.VER_STRING }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DBUILD_SHARED_LIBS=${{ matrix.build_shared_libs }} -DPHREEQCRM_WITH_YAML_CPP=${{ matrix.phreeqcrm_with_yaml_cpp }} -DPHREEQCRM_BUILD_PYTHON:BOOL=ON

    - name: Configure with CMake (Windows)
      if: ${{ runner.os == 'Windows' && matrix.phreeqcrm_with_yaml_cpp == 'ON' }}
      run: cmake --toolchain ${{ env.VCPKG_INSTALLATION_ROOT }}/scripts/buildsystems/vcpkg.cmake -B build -S phreeqcrm-${{ env.VER_STRING }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DBUILD_SHARED_LIBS=${{ matrix.build_shared_libs }} -DPHREEQCRM_WITH_YAML_CPP=${{ matrix.phreeqcrm_with_yaml_cpp }} -DPHREEQCRM_BUILD_PYTHON:BOOL=ON

    - name: Build with CMake
      run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }}

    - name: Test with CMake
      working-directory: ${{ github.workspace }}/build
      run: ctest -C ${{ env.BUILD_TYPE }} --output-on-failure

  cmake-fortran:
    name: cmake-fortran
    needs: [init, distcheck]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04]

    runs-on: ${{ matrix.os }}

    env:
      VER_STRING: ${{ needs.init.outputs.VER }}-${{ needs.init.outputs.REL }}

    steps:

    - uses: actions/download-artifact@v3
      with:
        name: tarball

    - name: Install ninja yaml-cpp valgrind (Linux)
      if: runner.os == 'Linux'
      #run: sudo apt-get install -y ninja-build valgrind libyaml-cpp-dev python3-numpy
      run: sudo apt-get install -y ninja-build valgrind libyaml-cpp-dev

    - name: Install ninja yaml-cpp (macOS)
      if: runner.os == 'macOS'
      run: brew install ninja yaml-cpp

    - name: Install yaml-cpp (Windows)
      if: ${{ runner.os == 'Windows' && matrix.phreeqcrm_with_yaml_cpp == 'ON' }}
      run: vcpkg install yaml-cpp:x64-windows

    # - name: Set up Python ${{ matrix.python-version }}
    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        # python-version: ${{ matrix.python-version }}
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install numpy
        # @todo if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Set up Visual Studio shell (Windows)
      if: runner.os == 'Windows'
      uses: egor-tensin/vs-shell@v2
      with:
        arch: x64

    - name: Extract tarball
      run: tar xvzf phreeqcrm-${{ env.VER_STRING }}.tar.gz

    - name: Configure with CMake (Not Windows)
      if: runner.os != 'Windows'
      run: cmake -B build -S phreeqcrm-${{ env.VER_STRING }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DBUILD_SHARED_LIBS=${{ matrix.build_shared_libs }} -DPHREEQCRM_WITH_YAML_CPP=${{ matrix.phreeqcrm_with_yaml_cpp }} -DPHREEQCRM_BUILD_PYTHON:BOOL=ON -DPHREEQCRM_FORTRAN_TESTING:BOOL=ON

    - name: Configure with CMake (Windows)
      if: ${{ runner.os == 'Windows' && matrix.phreeqcrm_with_yaml_cpp != 'ON' }}
      run: cmake -B build -S phreeqcrm-${{ env.VER_STRING }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DBUILD_SHARED_LIBS=${{ matrix.build_shared_libs }} -DPHREEQCRM_WITH_YAML_CPP=${{ matrix.phreeqcrm_with_yaml_cpp }} -DPHREEQCRM_BUILD_PYTHON:BOOL=ON -DPHREEQCRM_FORTRAN_TESTING:BOOL=ON

    - name: Configure with CMake (Windows)
      if: ${{ runner.os == 'Windows' && matrix.phreeqcrm_with_yaml_cpp == 'ON' }}
      run: cmake --toolchain ${{ env.VCPKG_INSTALLATION_ROOT }}/scripts/buildsystems/vcpkg.cmake -B build -S phreeqcrm-${{ env.VER_STRING }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DBUILD_SHARED_LIBS=${{ matrix.build_shared_libs }} -DPHREEQCRM_WITH_YAML_CPP=${{ matrix.phreeqcrm_with_yaml_cpp }} -DPHREEQCRM_BUILD_PYTHON:BOOL=ON -DPHREEQCRM_FORTRAN_TESTING:BOOL=ON

    - name: Build with CMake
      run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }}

    - name: Test with CMake
      working-directory: ${{ github.workspace }}/build
      run: ctest -C ${{ env.BUILD_TYPE }} --output-on-failure
